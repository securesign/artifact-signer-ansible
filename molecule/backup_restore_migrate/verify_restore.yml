- name: verifyRestore
  hosts: molecule
  gather_facts: true
  become: true
  vars_files:
    - "{{ molecule_ephemeral_directory + '/vars.yml' }}"
    - vars/podman.yml
    - vars/backup-restore-vars.yml
  vars:
    test_dir_path: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}/../test"
  tasks:

    - name: Ansible backup name
      ansible.builtin.set_fact:
        backupname: "{{lookup('file', '{{ molecule_ephemeral_directory}}/backupname.txt') }}"

    - name: Setting path for test staging
      ansible.builtin.set_fact:
        test_staging: "/var/lib/tas_restore_test"
  
    - name: Make Tas Restore Verification staging folder
      ansible.builtin.file:
        path: "{{ test_staging }}"
        state: directory
        mode: '0755'

    - name: Push Encrypted Backup Tarball to Remote Server
      ansible.builtin.copy:
        src: "{{ molecule_ephemeral_directory }}/{{ backupname }}"
        dest: "{{ test_staging }}/{{ backupname }}"
        remote_src: false
        mode: "0600"

    - name: Decrypt Backup Tarball
      ansible.builtin.shell: |
        openssl enc -d -aes-256-cbc -salt -pbkdf2 -iter 600000 \
        -in "{{ test_staging }}/{{ backupname }}" \
        -out "backup.tgz" \
        -pass pass:"{{ tas_single_node_backup_restore.restore.passphrase }}"
      args:
        executable: /bin/bash
        chdir: "{{ test_staging }}/"
      register: tarball
      changed_when: true

    - name: Extract Compressed Backup Tarball
      ansible.builtin.unarchive:
        src: "{{ test_staging }}/backup.tgz"
        dest: "{{ test_staging }}"
        remote_src: true

    - name: Find Extracted Backup Folder
      ansible.builtin.find:
        paths: "{{ test_staging }}"
        pattern: "BACKUP*"
        file_type: "directory"
      register: extracted_backup

    # Extracted backup name might be different to tarball name, hence having to find it ourselves
    - name: Collect Certs in Backup and Collect Certs in Use
      ansible.builtin.find:
        paths: "{{item}}"
        recurse: yes
        get_checksum: true
      register: gathered_files
      loop:
        - "{{ extracted_backup.files[0].path }}/rhtas/certs"
        - "/etc/rhtas/certs"

    - name: Assert that key checksums match
      ansible.builtin.assert:
        that: item.checksum == gathered_files.results[1].files[num].checksum
        success_msg: "Checksums for {{ item.path }} and {{ gathered_files.results[1].files[num].path }} match!"
        fail_msg: "Checksums for {{ item.path }} and {{ gathered_files.results[1].files[num].path }} do not match!"
      loop: "{{ gathered_files.results[0].files }}"
      loop_control:
        index_var: num

    - name: Collect Manifests in Backup and Collect Manifests in Use
      ansible.builtin.find:
        paths: "{{item}}"
        recurse: yes
        get_checksum: true
      register: gathered_files
      loop:
        - "{{ extracted_backup.files[0].path }}/rhtas/manifests"
        - "/etc/rhtas/manifests"

    - name: Assert that manifest checksums match
      ansible.builtin.assert:
        that: item.checksum == gathered_files.results[1].files[num].checksum
        success_msg: "Checksums for {{ item.path }} and {{ gathered_files.results[1].files[num].path }} match!"
        fail_msg: "Checksums for {{ item.path }} and {{ gathered_files.results[1].files[num].path }} do not match!"
      loop: "{{ gathered_files.results[0].files }}"
      loop_control:
        index_var: num

    - name: Collect Configs in Backup and Collect Configs in Use
      ansible.builtin.find:
        paths: "{{ item }}"
        recurse: yes
        get_checksum: true
      register: gathered_files
      loop:
        - "{{extracted_backup.files[0].path}}/rhtas/configs"
        - "/etc/rhtas/configs"

    - name: Assert that config checksums match
      ansible.builtin.assert:
        that: item.checksum == gathered_files.results[1].files[num].checksum
        success_msg: "Checksums for {{ item.path }} and {{ gathered_files.results[1].files[num].path }} match!"
        fail_msg: "Checksums for {{ item.path }} and {{ gathered_files.results[1].files[num].path }} do not match!"
      loop: "{{ gathered_files.results[0].files }}"
      loop_control:
        index_var: num

    - name: Include create common tasks
      ansible.builtin.include_tasks:
        file: ../common/verify_common.yml
      vars:
        expected_validations: 2

    - name: Turn restore off
      ansible.builtin.set_fact:
        tas_single_node_backup_restore: "{{ tas_single_node_backup_restore | combine({'restore': {'enabled': false}}, recursive=True) }}"

    - name: Set HostName
      ansible.builtin.set_fact:
        tas_single_node_base_hostname: yourrhtas

    - name: Apply tas_single_node role
      ansible.builtin.include_role:
        name: tas_single_node
    
    - name: Include create common tasks
      ansible.builtin.include_tasks:
        file: ../common/verify_common.yml
      vars:
        expected_validations: 3
