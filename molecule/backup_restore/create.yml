---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - vars/vars.yml
  vars:
    debug_outputs: true
    molecule_inventory:
      all:
        children:
          molecule:
            hosts: {}
  tasks:
    - name: Include create common tasks
      ansible.builtin.include_tasks:
        file: ../common/create_common.yml

    - name: Generate instance ID
      ansible.builtin.set_fact:
        instance_id: "{{ lookup('pipe', 'uuidgen') | regex_replace('[^a-zA-Z0-9]', '') | truncate(8) }}"

    - name: Set CI workflow name
      ansible.builtin.set_fact:
        workflow_id: "{{ lookup('env', 'RUN_ID') + '-' + lookup('env', 'SCENARIO_NAME') }}"
      when: lookup('env', 'RUN_ID')  | length > 0

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: "{{ 'CI-' + workflow_id | default(instance_id) }}"
        key_name: "{{ lookup('env', 'AWS_KEY_NAME') }}"
        instance_type: "{{ item.instance_type }}"
        image_id: "{{ item.image_id }}" 
        region: "{{ lookup('env', 'AWS_DEFAULT_REGION') }}"
        vpc_subnet_id: "{{ subnet_id }}"
        network:
          assign_public_ip: true
        security_group: "{{ sgID }}"
        wait: yes
        state: running
      with_items: "{{ molecule_yml.platforms }}"
      register: ec2_instance

    - name: Set instance ID and IP
      ansible.builtin.set_fact:
        instanceID: "{{ ec2_instance.results[0].instances[0].instance_id }}"
        instanceIP: "{{ ec2_instance.results[0].instances[0].network_interfaces[0].association.public_ip }}"

    - name: Populate instance config dict
      ansible.builtin.set_fact:
        instance_conf_dict: {
          'instance': "{{ instanceID }}",
          'address': "{{ instanceIP }}",
          'user': "ec2-user",
          'port': "22",
          'identity_file': "{{ item.aws_key_name }}",
        }
      with_items: "{{ molecule_yml.platforms }}"
      register: instance_config_dict

    - name: Convert instance config dict to a list
      ansible.builtin.set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump instance config
      ansible.builtin.copy:
        content: |
          # Molecule managed

          {{ instance_conf | to_json | from_json | to_yaml }}
        dest: "{{ molecule_instance_config }}"
        mode: "0600"

    - name: Add VM to molecule_inventory
      vars:
        inventory_partial_yaml: |
          all:
            children:
              molecule:
                hosts:
                  "{{ instanceIP }}":
                    ansible_user: ec2-user 
                    ansible_ssh_private_key_file: "{{ item.private_key_file_path }}"
                    ansible_become: true
      ansible.builtin.set_fact:
        molecule_inventory: >
          {{ molecule_inventory | combine(inventory_partial_yaml | from_yaml, recursive=true) }}
      with_items: "{{ molecule_yml.platforms }}"

    - name: Add AWS EC2 Instance to known hosts
      ansible.builtin.shell:
        cmd: ssh-keyscan -H {{ instanceIP }} >> ~/.ssh/known_hosts
      retries: 15
      delay: 15

    - name: Dump molecule_inventory
      ansible.builtin.copy:
        content: |
          {{ molecule_inventory | to_yaml }}
        dest: "{{ molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
        mode: "0600"

    - name: Force inventory refresh
      ansible.builtin.meta: refresh_inventory

    - name: Fail if molecule group is missing
      ansible.builtin.assert:
        that: "'molecule' in groups"
        fail_msg: |
          molecule group was not found inside inventory groups: {{ groups }}
      run_once: true
