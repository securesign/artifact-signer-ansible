---
- name: Rotate CTL key
  hosts: molecule
  gather_facts: true
  become: true
  vars_files:
    - "{{ molecule_ephemeral_directory + '/vars.yml' }}"
  vars:
    volumes:
      tuf-signing-keys: "{{ molecule_ephemeral_directory }}/tuf-signing-keys"
      tuf-repository: "{{ molecule_ephemeral_directory }}/tuf-repo"
  tasks:
    - name: Load ctlog-treeid-config.yaml file
      ansible.builtin.slurp:
        src: /etc/rhtas/configs/ctlog-treeid-config.yaml
      register: ctlog_config_raw

    - name: Extract tree_id from ctlog-treeid-config.yaml
      ansible.builtin.set_fact:
        old_tree_id: "{{ ctlog_config_raw.content | b64decode | from_yaml | json_query('data.tree_id') }}"

    - name: Drain tree
      containers.podman.podman_container:
        name: "rhtas-key-rotation-{{ ansible_date_time.epoch }}"
        image: registry.redhat.io/rhtas/updatetree-rhel9:1.1.0
        network: rhtas
        rm: true
        recreate: true
        command:
          - "--admin_server=trillian-logserver-pod:8091"
          - "--tree_id={{ old_tree_id }}"
          - "--tree_state=DRAINING"
        attach:
          - stdout
          - stderr

    - name: Freeze tree
      containers.podman.podman_container:
        name: "rhtas-key-rotation-{{ ansible_date_time.epoch }}"
        image: registry.redhat.io/rhtas/updatetree-rhel9:1.1.0
        rm: true
        network: rhtas
        recreate: true
        command:
          - "--admin_server=trillian-logserver-pod:8091"
          - "--tree_id={{ old_tree_id }}"
          - "--tree_state=FROZEN"
        attach:
          - stdout
          - stderr

    - name: Create new tree
      containers.podman.podman_container:
        name: "rhtas-key-rotation-{{ ansible_date_time.epoch }}"
        image: registry.redhat.io/rhtas/createtree-rhel9:1.1.0
        rm: true
        network: rhtas
        recreate: true
        command:
          - "--admin_server=trillian-logserver-pod:8091"
          - "-display_name=ctlog-tree"
        attach:
          - stdout
          - stderr
      register: new_tree_out

    - name: Add ctl public key to list
      ansible.builtin.set_fact:
        tas_single_node_ctlog: >-
          {{
            tas_single_node_ctlog | combine({
              'public_keys': tas_single_node_ctlog.public_keys + [{
                'id': 'new-key-pub',
                'key': lookup('file', molecule_scenario_directory + '/test_creds/ctlog/ctlog1.pub')
              }]
            })
          }}


    - name: Add ctlog private key
      ansible.builtin.set_fact:
        tas_single_node_ctlog: >-
          {{
            tas_single_node_ctlog | combine({
              'private_keys': tas_single_node_ctlog.private_keys + [{
                'id': 'new-key',
                'key': lookup('file', molecule_scenario_directory + '/test_creds/ctlog/ctlog1.key')
              }]
            })
          }}

    - name: Configure ctlog sharding
      block:
        - name: Get limit time seconds
          command: "date +%s"
          register: seconds
        - name: Get limit time nanos
          command: "date +%N"
          register: nanos
        - name: Configure sharding
          ansible.builtin.set_fact:
            tas_single_node_ctlog: >-
              {{
                tas_single_node_ctlog | combine({
                  'sharding_config': [{
                    'treeid': old_tree_id,
                    'prefix': 'rhtasansible',
                    'root_pem_file': "/ctfe-keys/fulcio-0",
                    'password': "password",
                    'private_key': "private-ctlog-key0",
                    'not_after_limit': {
                      'seconds': seconds.stdout,
                      'nanos': nanos.stdout
                    }
                  },
                  {
                    'treeid': new_tree_out.stdout | trim,
                    'prefix': 'rhtasansible-1',
                    'root_pem_file': "/ctfe-keys/fulcio-0",
                    'password': "passphrase",
                    'private_key': "new-key",
                    'not_after_start': {
                      'seconds': seconds.stdout,
                      'nanos': nanos.stdout
                    }
                  }]
                })
              }}
        - name: Update fulcio to use new ctl_prefix
          ansible.builtin.set_fact:
            tas_single_node_fulcio: "{{ tas_single_node_fulcio | combine({
              'ct_log_prefix': 'rhtasansible-1'
              }) }}"

    - name: Update TUF repository
      ansible.builtin.include_tasks:
        file: tasks/tuf.yml
      vars:
        component: 'ctlog'
        active_key_path: '/etc/rhtas/certs/ctlog0.pub'
        active_key_name: 'ctfe.pub'
        new_key_content: "{{ lookup('file', molecule_scenario_directory + '/test_creds/ctlog/ctlog1.pub') }}"
        new_key_name: 'new-ctlog-public.pem'

    - name: Archive tuf-repo locally
      ansible.builtin.command:
        cmd: "tar -czf {{ molecule_ephemeral_directory }}/tuf-repo.tar.gz -C {{ volumes['tuf-repository'] }} ../tuf-repo"
      delegate_to: localhost
      become: false

    - name: Set base64-encoded archive as variable
      ansible.builtin.set_fact:
        tas_single_node_trust_root:
          full_archive: "{% raw %}{{ lookup('file', molecule_ephemeral_directory + '/tuf-repo.tar.gz') | b64encode }}{% endraw %}"

    - name: Store generated values to var file
      ansible.builtin.copy:
        content: "{{ vars | dict2items | selectattr('key', 'search', '^tas_single_node_') | items2dict | to_nice_yaml }}"
        dest: "{{ molecule_ephemeral_directory + '/vars.yml' }}"
      delegate_to: localhost
      become: false
