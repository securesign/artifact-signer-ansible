---
- name: Checking RHTAS network for Dex instance
  ansible.builtin.shell: |
    podman inspect dex-idp | grep '"rhtas":'
  register: rhtas_check
  ignore_errors: true

- name: Adding Dex instance to RHTAS network
  ansible.builtin.shell: podman network connect rhtas dex-idp
  when: rhtas_check.stdout == ""
  ignore_errors: true

- name: Checking Podman network for Dex instance
  ansible.builtin.shell: |
    podman inspect dex-idp | grep '"podman":'
  register: podman_check
  ignore_errors: true

- name: Disconnecting Dex from Podman network
  ansible.builtin.shell: |
    podman network disconnect podman dex-idp
  when: podman_check.stdout

- name: Get IP of the current node
  # The tasks below run locally, so their ansible_ssh_host is 127.0.0.1
  ansible.builtin.set_fact:
    node_ip: "{{ ansible_ssh_host }}"

- name: Build the test Podman image
  containers.podman.podman_image:
    name: fedora-cosign
    tag: latest
    pull: false
    force: true
    path: "{{ test_dir_path }}"
    build:
      cache: true
      file: "{{ test_dir_path }}/Containerfile"
  become: false
  delegate_to: localhost

- name: Run tests in a Podman container
  containers.podman.podman_container:
    name: "rhtas-test-container-{{ ansible_date_time.epoch }}"
    image: fedora-cosign:latest
    rm: true
    recreate: true
    env:
      BASE_HOSTNAME: "{{ tas_single_node_base_hostname }}"
      EMAIL: "kilgore@kilgore.trout"
      OIDC_ISSUER_URL: "http://dex-idp:5556/dex"
    # NOTE: we can't add hosts with the etc_hosts parameter, because we would need to template
    # the dictionary keys for it and Ansible doesn't do that
    cmd_args:
      - "--add-host"
      - "fulcio.{{ tas_single_node_base_hostname }}:{{ node_ip }}"
      - "--add-host"
      - "rekor.{{ tas_single_node_base_hostname }}:{{ node_ip }}"
      - "--add-host"
      - "tuf.{{ tas_single_node_base_hostname }}:{{ node_ip }}"
      - "--add-host"
      - "tsa.{{ tas_single_node_base_hostname }}:{{ node_ip }}"
      - "--add-host"
      - "dex-idp:{{ node_ip }}"
    volume:
      - "{{ test_dir_path }}:/mnt:z"
    entrypoint: /bin/bash
    command: /mnt/test-sign-blob.sh
    attach:
      - stdout
      - stderr
  delegate_to: localhost
  become: false
  register: blob_verify_output

- name: Ensure the blob was verified successfully
  ansible.builtin.assert:
    that: blob_verify_output.stderr is contains("Verified OK")
