name: 'Go E2E Tests Reusable Action'
description: 'Run Go E2E tests using the provided TAS server and Go version.'
inputs:
  tas_address:
    description: 'TAS server address'
    required: true
    type: string
  fulcio_host:
    description: 'Fulcio server hostname'
    required: false
    default: 'fulcio.myrhtas'
  rekor_host:
    description: 'Rekor server hostname'
    required: false
    default: 'rekor.myrhtas'
  rekor_search_host:
    description: 'Rekor search server hostname'
    required: false
    default: 'rekor-search.myrhtas'
  tuf_host:
    description: 'TUF server hostname'
    required: false
    default: 'tuf.myrhtas'
  tsa_host:
    description: 'TSA server url'
    required: false
    default: 'tsa.myrhtas'
  cli_server_host:
    description: 'Client server hostname'
    required: false
    default: 'cli-server.myrhtas'
  oidc_host:
    description: 'OIDC provider hostname'
    required: false
    default: 'dex-idp'
  oidc_url:
    description: 'OIDC provider url'
    required: false
    default: 'http://dex-idp:5556/dex'
  oidc_client_secret:
    description: 'OIDC provider client secret'
    required: false
    default: 'ZXhhbXBsZS1hcHAtc2VjcmV0'
  go_version:
    description: 'Go version'
    required: true
    default: '1.21'
    type: string
runs:
  using: 'composite'
  steps:
    - name: Checkout go test source code
      uses: actions/checkout@v4
      with:
        repository: "securesign/sigstore-e2e"
        path: e2e
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version }}

    - name: Resolve TAS_SINGLENODE hostname
      shell: bash
      run: |
        echo "${{ inputs.tas_address }} ${{ inputs.fulcio_host }} ${{ inputs.tuf_host }} ${{ inputs.rekor_host }} ${{ inputs.tsa_host }} ${{ inputs.rekor_search_host }} ${{ inputs.cli_server_host }}" | sudo tee -a /etc/hosts

    - name: Resolve OIDC hostname
      if: ${{ inputs.oidc_host != '' }}
      shell: bash
      run: |
        echo "${{ inputs.tas_address }} ${{ inputs.oidc_host }}" | sudo tee -a /etc/hosts

    - name: Resolve certificates
      shell: bash
      run: |
        sudo bash -c "source vm-testing/test/extract_root_cert.sh; extractRootCert ${{ inputs.rekor_host }} /usr/local/share/ca-certificates/myrhtas.crt"
        sudo update-ca-certificates
    - name: Resolve OIDC TOKEN
      shell: bash
      run: |
        AUTHTOKEN="$(curl -Lis "http://${{ inputs.oidc_host }}:5556/dex/auth/mock?client_id=example-app&scope=openid%20email&redirect_uri=http://${{ inputs.oidc_host }}:5556/callback&response_type=code" | grep -oP "code=\K[^&]+")"

        if [ -z "${AUTHTOKEN}" ]; then
          echo "Error: Unable to fetch authorization code."
          exit 1
        fi

        TOKEN="$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=authorization_code" -d "code=${AUTHTOKEN}" -d "redirect_uri=http://${{ inputs.oidc_host }}:5556/callback" -d "client_id=example-app" -d "client_secret=${{ inputs.oidc_client_secret }}" "http://${{ inputs.oidc_host }}:5556/dex/token" | sed -n 's/.*"access_token":"\([^"]*\)".*/\1/p')"
        
        if [ -z "${TOKEN}" ]; then
          echo "Error: Unable to fetch access code."
          exit 1
        fi
        
        echo "OIDC_TOKEN=$TOKEN" >> $GITHUB_ENV
    - name: Run e2e
      shell: bash
      env:
        OIDC_ISSUER_URL: ${{ inputs.oidc_url }}
        OIDC_CLIENT_ID: example-app
        OIDC_USER: "kilgore"
        OIDC_USER_DOMAIN: "kilgore.trout"
        KEYKLOAK_REALM: example-app
        CLI_STRATEGY: cli_server
        CLI_SERVER_URL: "https://${{ inputs.cli_server_host }}"
        FULCIO_URL: "https://${{ inputs.fulcio_host }}"
        REKOR_URL: "https://${{ inputs.rekor_host }}"
        REKOR_UI_URL: "https://${{ inputs.rekor_search_host }}"
        TUF_URL: "https://${{ inputs.tuf_host }}"
        TSA_URL: "https://${{ inputs.tsa_host }}/api/v1/timestamp"
      run: |
        cd e2e
        source ./tas-env-variables.sh
        # exclude UI tests 
        go test -v $(go list ./test/... | grep -v rekorsearchui)
