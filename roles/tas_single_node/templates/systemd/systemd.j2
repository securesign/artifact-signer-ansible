[Unit]
Description="{{ podman_spec.systemd_file}}" systemd container
Documentation=man:podman-kube-play(1)
Wants=network-online.target
After=network-online.target
RequiresMountsFor=%t/containers

[Service]
Environment=PODMAN_SYSTEMD_UNIT=%n
TimeoutStopSec=70
{% if podman_spec.configmap is defined %}
ExecStart=/usr/bin/podman kube play --replace --service-container=true "{{ kube_play_file }}"  --network "{{ podman_spec.network | default('podman') }}" --configmap "{{ podman_spec.configmap | default(omit) }}"
{% else %}
ExecStart=/usr/bin/podman kube play --replace --service-container=true "{{ kube_play_file }}"  --network "{{ podman_spec.network | default('podman') }}"
{% endif %}
{#
* if this is a oneshot job, we want to keep the pod around for possible failure inspection, so we remove it next time we start the job (ExecStartPre)
* if this is a regular service, we remove the pod when shutting down (ExecPost)
#}
Exec{% if "systemd_type" in podman_spec and podman_spec.systemd_type == "oneshot" %}StartPre=-{% else %}Stop={% endif %}/usr/bin/podman stop "{{ podman_spec.kube_file_content.metadata.name }}-pod-{{ podman_spec.kube_file_content.spec.template.spec.containers[0].name }}" && /usr/bin/podman kube down "{{ kube_play_file }}"
Type={{ podman_spec.systemd_type | default('notify') }}
NotifyAccess=all

[Install]
WantedBy=default.target
