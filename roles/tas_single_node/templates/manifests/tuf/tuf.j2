apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ tas_single_node_tuf_pod }}"
  namespace: tuf-system
  labels:
    app.podman.io/component: tuf
    app.podman.io/part-of: trusted-artifact-signer
    app.name: tuf
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tuf
  template:
    metadata:
      labels:
        app: tuf
        app.podman.io/component: tuf
        app.podman.io/part-of: trusted-artifact-signer
        app.name: tuf
    spec:
      containers:
        - name: tuf
          image: "{{ tas_single_node_http_server_image }}"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ tas_single_node_tuf_port_http }}
              protocol: TCP
          readinessProbe:
            httpGet:
              port: {{ tas_single_node_tuf_port_http }}
              path: "/1.root.json"
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              port: {{ tas_single_node_tuf_port_http }}
              path: "/1.root.json"
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/www/html
              name: "{{ tas_single_node_tuf_repository_volume_name }}"
              readOnly: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      securityContext: {}
      serviceAccountName: tuf
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 300
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 300
      volumes:
        - name: "{{ tas_single_node_tuf_repository_volume_name }}"
          persistentVolumeClaim:
            claimName: "{{ tas_single_node_tuf_repository_volume_name }}"
