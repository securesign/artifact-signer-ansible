---
- name: Obtain Trillian Tree ID
  ansible.builtin.include_tasks: podman/createtree.yml
  vars:
    tas_single_node_treeid_config: "{{ tas_single_node_rekor_treeid_config }}"

- name: Slurp Rekor keys
  ansible.builtin.slurp:
    src: "{{ item }}"
  loop:
    - "{{ tas_single_node_remote_rekor_private_key }}"
    - "{{ tas_single_node_remote_rekor_public_key }}"
  register: remote_rekor_keys

- name: Mount rekor files to the volumes
  no_log: true
  block:
    - name: Create pod with volumes mounted
      ansible.builtin.shell: |
        podman pod rm -f mount-pod || true && \
        podman pod create --name mount-pod -v rekor-secret:/secret -v rekor-server-config:/config
      register: pod_create_result
      changed_when: false

    - name: Start persistent container in mount-pod
      ansible.builtin.shell: |
        podman run -d --pod mount-pod quay.io/libpod/busybox:latest sleep infinity
      changed_when: false
      when: pod_create_result.rc == 0

    - name: Get rekor-secret volume mountpoint
      ansible.builtin.shell:
        cmd: >-
          set -o pipefail &&
          podman volume inspect rekor-secret | jq -r '.[0].Mountpoint'
      register: rekor_secret_mountpoint
      changed_when: false

    - name: Mount key files to rekor-secret volume
      ansible.builtin.copy:
        dest: "{{ rekor_secret_mountpoint.stdout }}/{{ item.key }}"
        content: "{{ item.value }}"
        mode: '0644'
      loop: "{{ data | dict2items }}"
      when: rekor_secret_mountpoint.stdout is defined
      vars:
        data:
          private: >-
            {{ (remote_rekor_keys.results
            | selectattr('source', 'equalto', tas_single_node_remote_rekor_private_key)
            | list | first).content | b64decode }}
          public: >-
            {{ (remote_rekor_keys.results
            | selectattr('source', 'equalto', tas_single_node_remote_rekor_public_key)
            | list | first).content | b64decode }}

    - name: Get rekor-server-config volume mountpoint
      ansible.builtin.shell:
        cmd: >-
          set -o pipefail &&
          podman volume inspect rekor-server-config | jq -r '.[0].Mountpoint'
      register: rekor_server_config_mountpoint
      changed_when: false

    - name: Mount files to rekor-server-config volume
      ansible.builtin.copy:
        dest: "{{ rekor_server_config_mountpoint.stdout }}/{{ item.key }}"
        content: "{{ item.value }}"
        mode: '0644'
      loop: "{{ data | dict2items }}"
      when: rekor_server_config_mountpoint.stdout is defined
      vars:
        data:
          sharding-config.yaml: ""

    - name: Remove the pod after files are copied
      ansible.builtin.shell: |
        podman pod rm -f mount-pod
      changed_when: false

- name: Deploy Rekor Redis Pod
  ansible.builtin.include_tasks: podman/install_manifest.yml
  vars:
    podman_spec:
      state: started
      systemd_file: redis
      network: "{{ tas_single_node_podman_network }}"
      kube_file_content: "{{ lookup('ansible.builtin.template', 'manifests/rekor/redis-server.j2') | from_yaml }}"
  when: tas_single_node_rekor_redis.database_deploy

- name: Deploy Rekor Server Pod
  ansible.builtin.include_tasks: podman/install_manifest.yml
  vars:
    podman_spec:
      state: started
      systemd_file: rekor
      network: "{{ tas_single_node_podman_network }}"
      kube_file_content: "{{ lookup('ansible.builtin.template', 'manifests/rekor/rekor-server.j2') | from_yaml }}"

- name: Deploy backfill Redis job
  ansible.builtin.include_tasks: podman/install_manifest.yml
  vars:
    podman_spec:
      state: started
      systemd_file: backfill_redis
      network: "{{ tas_single_node_podman_network }}"
      kube_file_content: "{{ lookup('template', 'manifests/rekor/backfill_redis.j2') | from_yaml }}"
  when: tas_single_node_backfill_redis.enabled

- name: Copy backfill_redis.timer file to server
  ansible.builtin.template:
    src: systemd/backfill_redis.timer.j2
    dest: "{{ tas_single_node_systemd_directory }}/backfill_redis.timer"
    mode: "0644"
  when: tas_single_node_backfill_redis.enabled
  register: copy_timer_systemd_file

- name: Enable and start backfill_redis.timer
  ansible.builtin.systemd:
    name: backfill_redis.timer
    enabled: true
    state: started
    daemon_reload: "{{ copy_timer_systemd_file.changed }}"
  when: tas_single_node_backfill_redis.enabled
