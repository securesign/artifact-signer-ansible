---
- name: Check if Trillian treeid Config exists
  ansible.builtin.stat:
    path: "{{ tas_single_node_treeid_config }}"
  register: treeid_config_stat

- name: Obtain existing ctlog ID
  when: tree_id is not defined and treeid_config_stat.stat.exists
  block:
    - name: Obtain existing Trillian Treeid config
      ansible.builtin.slurp:
        src: "{{ tas_single_node_treeid_config }}"
      register: existing_treeid_config

    - name: Set Trillian Tree ID fact
      ansible.builtin.set_fact:
        trillian_tree_id: "{{ (existing_treeid_config.content | b64decode | from_yaml)['data']['tree_id'] }}"
      when: '"tree_id" in (existing_treeid_config.content | b64decode | from_yaml)["data"]'

# Create Tree ID
- name: Create Tree ID
  when: trillian_tree_id is not defined or not treeid_config_stat.stat.exists and tas_single_node_createtree_enabled | bool
  block:
    - name: Generate unique container name for the createtree container
      ansible.builtin.set_fact:
        createtree_container_name: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters') }}"

    - name: Createtree container
      ansible.builtin.command:
        cmd: >-
          podman run --network {{ tas_single_node_podman_network }} --replace
          --name {{ createtree_container_name }} {{ tas_single_node_createtree_image }}
          --admin_server {{ tas_single_node_trillian_logserver_pod }}-pod:{{ tas_single_node_trillian_logserver_port_rpc }}
      register: createtree_container
      changed_when: true

    - name: Obtain Createtree logs
      ansible.builtin.command:
        cmd: "podman logs {{ createtree_container_name }}"
      register: createtree_container_logs
      changed_when: false

    - name: Set Trillian tree id
      ansible.builtin.set_fact:
        trillian_tree_id: "{{ createtree_container_logs.stdout_lines[0] }}"

    - name: Remove createtree container
      ansible.builtin.command:
        cmd: "podman rm {{ createtree_container_name }}"
      changed_when: true

    - name: Create Trillian treeid ConfigMap
      ansible.builtin.copy:
        content: "{{ configmap_content | to_nice_yaml(indent=2) }}"
        dest: "{{ tas_single_node_treeid_config }}"
        mode: "0600"
      vars:
        configmap_content:
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: trillian-treeid
            namespace: rekor-system
          data:
            tree_id: "{{ trillian_tree_id }}"
