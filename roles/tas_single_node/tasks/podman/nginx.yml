---
- name: Confirmed required parameters provided
  ansible.builtin.assert:
    that:
      - tas_single_node_base_hostname is defined
      - tas_single_node_base_hostname | trim | length > 0
    msg: "'tas_single_node_base_hostname' must be specified"

- name: Get RHTAS network details
  ansible.builtin.command:
    cmd: "podman network inspect {{ tas_single_node_podman_network }}"
  register: tas_podman_network_results
  changed_when: false

- name: Set DNS Resolver
  ansible.builtin.set_fact:
    dns_resolver: "{{ (tas_podman_network_results.stdout | from_json)[0].subnets[0].gateway }}"

- name: Slurp ingress Certificates
  ansible.builtin.slurp:
    src: "{{ item }}"
  loop:
    - "{{ tas_single_node_remote_ca }}"
    - "{{ tas_single_node_certs_dir }}/ingress-rekor.pem"
    - "{{ tas_single_node_certs_dir }}/ingress-rekor.key"
    - "{{ tas_single_node_certs_dir }}/ingress-rekor-search.pem"
    - "{{ tas_single_node_certs_dir }}/ingress-rekor-search.key"
    - "{{ tas_single_node_certs_dir }}/ingress-tuf.pem"
    - "{{ tas_single_node_certs_dir }}/ingress-tuf.key"
    - "{{ tas_single_node_certs_dir }}/ingress-fulcio.pem"
    - "{{ tas_single_node_certs_dir }}/ingress-fulcio.key"
    - "{{ tas_single_node_certs_dir }}/ingress-tsa.pem"
    - "{{ tas_single_node_certs_dir }}/ingress-tsa.key"
    - "{{ tas_single_node_certs_dir }}/ingress-cli-server.pem"
    - "{{ tas_single_node_certs_dir }}/ingress-cli-server.key"
  register: remote_ingress_certificates

- name: Base64 encode the rekor ingress
  ansible.builtin.set_fact:
    rekor_ingress_base64: >-
      {{ (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-rekor.pem') | list | first).content
      | b64decode + (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_ca) | list | first).content
      | b64decode }}

- name: Base64 encode the rekor ingress
  ansible.builtin.set_fact:
    rekor_search_ingress_base64: >-
      {{ (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-rekor-search.pem') | list | first).content
      | b64decode + (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_ca) | list | first).content
      | b64decode }}


- name: Base64 encode the tuf ingress
  ansible.builtin.set_fact:
    tuf_ingress_base64: >-
      {{ (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-tuf.pem') | list | first).content
      | b64decode + (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_ca) | list | first).content
      | b64decode }}

- name: Base 64 encode the fulcio ingress
  ansible.builtin.set_fact:
    fulcio_ingress_base64: >-
      {{ (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-fulcio.pem') | list | first).content
      | b64decode + (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_ca) | list | first).content
      | b64decode }}

- name: Base 64 encode the tsa ingress
  ansible.builtin.set_fact:
    tsa_ingress_base64: >-
      {{ (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-tsa.pem') | list | first).content
      | b64decode + (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_ca) | list | first).content
      | b64decode }}

- name: Base 64 encode the cli server ingress
  ansible.builtin.set_fact:
    cli_server_ingress_base64: >-
      {{ (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-cli-server.pem') | list | first).content
      | b64decode + (remote_ingress_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_ca) | list | first).content
      | b64decode }}

- name: Load nginx config content
  ansible.builtin.set_fact:
    nginx_config_content: "{{ lookup('ansible.builtin.template', 'configs/nginx.conf.j2') }}"

- name: Mount nginx files to the volumes
  no_log: true
  block:
    - name: Create pod with volumes mounted
      ansible.builtin.shell: |
        podman pod rm -f mount-pod || true && \
        podman pod create --name mount-pod -v nginx-certs:/certs -v nginx-config:/config
      register: pod_create_result
      changed_when: false
      ignore_errors: yes

    - name: Start persistent container in mount-pod
      ansible.builtin.shell: |
        podman run -d --pod mount-pod quay.io/libpod/busybox:latest sleep infinity
      changed_when: false
      when: pod_create_result.rc == 0

    - name: Get nginx-certs volume mountpoint
      ansible.builtin.shell:
        cmd: >-
          set -o pipefail &&
          podman volume inspect nginx-certs | jq -r '.[0].Mountpoint'
      register: nginx_certs_mountpoint
      changed_when: false

    - name: Mount certs to nginx-certs volume
      ansible.builtin.copy:
        dest: "{{ nginx_certs_mountpoint.stdout }}/{{ item.key }}"
        content: "{{ item.value }}"
        mode: '0644'
      loop: "{{ certs_content | dict2items }}"
      when: nginx_certs_mountpoint.stdout is defined
      vars:
        certs_content:
          ingress-rekor.pem: "{{ rekor_ingress_base64 }}"
          ingress-rekor-search.pem: "{{ rekor_search_ingress_base64 }}"
          ingress-tuf.pem: "{{ tuf_ingress_base64 }}"
          ingress-fulcio.pem: "{{ fulcio_ingress_base64 }}"
          ingress-tsa.pem: "{{ tsa_ingress_base64 }}"
          ingress-cli-server.pem: "{{ cli_server_ingress_base64 }}"
          ingress-rekor.key: >-
            {{ (remote_ingress_certificates.results
            | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-rekor.key')
            | list | first).content | b64decode }}
          ingress-rekor-search.key: >-
            {{ (remote_ingress_certificates.results
            | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-rekor-search.key')
            | list | first).content | b64decode }}
          ingress-tuf.key: >-
            {{ (remote_ingress_certificates.results
            | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-tuf.key')
            | list | first).content | b64decode }}
          ingress-fulcio.key: >-
            {{ (remote_ingress_certificates.results
            | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-fulcio.key')
            | list | first).content | b64decode }}
          ingress-tsa.key: >-
            {{ (remote_ingress_certificates.results
            | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-tsa.key')
            | list | first).content | b64decode }}
          ingress-cli-server.key: >-
            {{ (remote_ingress_certificates.results
            | selectattr('source', 'equalto', tas_single_node_certs_dir + '/ingress-cli-server.key')
            | list | first).content | b64decode }}

    - name: Get nginx-config volume mountpoint
      ansible.builtin.shell:
        cmd: >-
          set -o pipefail &&
          podman volume inspect nginx-config | jq -r '.[0].Mountpoint'
      register: nginx_config_mountpoint
      changed_when: false

    - name: Mount nginx.conf to nginx-config volume
      ansible.builtin.copy:
        dest: "{{ nginx_config_mountpoint.stdout }}/nginx.conf"
        content: "{{ nginx_config_content }}"
        mode: '0644'
      when: nginx_config_mountpoint.stdout is defined

    - name: Remove the pod after files are copied
      ansible.builtin.shell: |
        podman pod rm -f mount-pod
      changed_when: false
      ignore_errors: yes

- name: Deploy nginx Pod
  ansible.builtin.include_tasks: podman/install_manifest.yml
  vars:
    podman_spec:
      state: started
      network: "{{ tas_single_node_podman_network }}"
      systemd_file: nginx
      kube_file_content: "{{ lookup('ansible.builtin.template', 'manifests/nginx/nginx.j2') | from_yaml }}"
