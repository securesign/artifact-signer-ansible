---
- name: Confirmed required parameters provided
  ansible.builtin.assert:
    that:
      - tas_single_node_base_hostname is defined
      - tas_single_node_base_hostname | trim | length > 0
    msg: "'tas_single_node_base_hostname' must be specified"

- name: Slurp tuf Certificates
  ansible.builtin.slurp:
    src: "{{ item }}"
  loop:
    - "{{ tas_single_node_remote_ctlog_public_key }}"
    - "{{ tas_single_node_remote_fulcio_root_ca }}"
    - "{{ tas_single_node_remote_tsa_certificate_chain }}"
  register: remote_tuf_certificates

- name: Retrieve Rekor Public Key
  ansible.builtin.command:
    cmd: >-
      podman exec {{ tas_single_node_rekor_server_pod }}-pod-rekor-server
      curl -k --fail --retry {{ tas_single_node_rekor_public_key_retries }}
      --retry-delay {{ tas_single_node_rekor_public_key_delay }} http://localhost:{{ tas_single_node_rekor_server_port_http }}/api/v1/log/publicKey
  register: rekor_public_key_result
  changed_when: false

- name: Create tuf Secret
  ansible.builtin.copy:
    content: "{{ configmap_content | to_nice_yaml(indent=2) }}"
    dest: "{{ tas_single_node_tuf_secret_config }}"
    mode: "0600"
  vars:
    configmap_content:
      kind: Secret
      apiVersion: v1
      metadata:
        name: tuf-secret
        namespace: tuf-system
      data:
        ctfe-pubkey: |
          {{ (remote_tuf_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_ctlog_public_key) | list | first).content }}
        fulcio-cert: |
          {{ (remote_tuf_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_fulcio_root_ca) | list | first).content }}
        rekor-pubkey: |
          {{ rekor_public_key_result.stdout | b64encode }}
        tsa-cert: |
          {{ (remote_tuf_certificates.results | selectattr('source', 'equalto', tas_single_node_remote_tsa_certificate_chain) | list | first).content }}
  register: secret_result

- name: Initialize trust root
  ansible.builtin.include_tasks: podman/install_manifest.yml
  vars:
    podman_spec:
      state: started
      systemd_file: tuf-init-job
      systemd_type: oneshot
      network: "{{ tas_single_node_podman_network }}"
      kube_file_content: "{{ lookup('ansible.builtin.template', 'manifests/tuf/tuf-init.j2') | from_yaml }}"
      secret: "{{ tas_single_node_tuf_secret_config }}"
      secret_changed: "{{ secret_result.changed }}"

- name: Deploy TUF server pod
  ansible.builtin.include_tasks: podman/install_manifest.yml
  vars:
    podman_spec:
      state: started
      systemd_file: tuf
      network: "{{ tas_single_node_podman_network }}"
      kube_file_content: "{{ lookup('ansible.builtin.template', 'manifests/tuf/tuf.j2') | from_yaml }}"
