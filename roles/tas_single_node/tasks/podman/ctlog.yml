---
- name: Obtain Trillian Tree ID
  ansible.builtin.include_tasks: podman/createtree.yml
  vars:
    tas_single_node_treeid_config: "{{ tas_single_node_ctlog_treeid_config }}"

- name: Slurp ctlog Certificates
  ansible.builtin.slurp:
    src: "{{ item }}"
  with_items:
    - "{{ tas_single_node_remote_fulcio_root_ca }}"
    - >-
      {%- if tas_single_node_custom_ctlog_private_key_names | length > 0 -%}
      {{ tas_single_node_custom_ctlog_private_key_names }} 
      {%- else -%}
      {{ tas_single_node_remote_ctlog_private_key }} 
      {%- endif -%}
    - >-
      {%- if tas_single_node_custom_ctlog_public_key_names | length > 0  -%}
      {{ tas_single_node_custom_ctlog_public_key_names }} 
      {%- else -%}
      {{ tas_single_node_remote_ctlog_public_key }} 
      {%- endif -%}
  register: remote_ctlog_certificates

- name: Load ctlog config content
  block:
    - name: Use Template Ctlog Config
      when: tas_single_node_ctlog.sharded_config != ""
      ansible.builtin.set_fact:
        ctlog_config_content: "{{ lookup('ansible.builtin.template', 'configs/ctlog-config-template.j2') }}"

- name: Create ctlog configmap
  ansible.builtin.copy:
    content: "{{ configmap_content | to_nice_yaml(indent=2) }}"
    dest: "{{ tas_single_node_ctlog_configmap_config }}"
    mode: "0600"
  vars:
    configmap_content:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: ctlog-config
        namespace: ctlog-system
      data:
        config: "{{ ctlog_config_content }}"
  register: configmap_result

- name: Create Ctlog Secret
  block:
    - name: Set Keys
      ansible.builtin.set_fact:
        ctlog_pub_keys: >-
          {%- if tas_single_node_custom_ctlog_public_key_names | length == 0 -%}
          {{ tas_single_node_remote_ctlog_public_key }}
          {%- else -%}
          {{ tas_single_node_custom_ctlog_public_key_names }}
          {%- endif -%}
        ctlog_priv_keys: >-
          {%- if tas_single_node_custom_ctlog_private_key_names | length == 0 -%}
          {{ tas_single_node_remote_ctlog_private_key }}
          {%- else -%}
          {{ tas_single_node_custom_ctlog_private_key_names }}
          {%- endif -%}

    - name: Create the Secret Content
      ansible.builtin.set_fact:
        ctlog_secret_content: "{{ lookup('ansible.builtin.template', 'configs/certs-secret-template.j2') }}"
      vars:
        secret_name: ctlog-secret
        secret_namespace: ctlog-system
        keyname: [private, public, fulcio]
        keylists: ['{{ ctlog_priv_keys }}', '{{ ctlog_pub_keys }}', '{{ tas_single_node_remote_fulcio_root_ca }}']
        slurpedcerts: '{{ remote_ctlog_certificates }}'

- name: Create Custom ctlog Secret
  ansible.builtin.copy:
    content: "{{ ctlog_secret_content }}"
    dest: "{{ tas_single_node_ctlog_secret }}"
    mode: "0600"
  register: secret_result

- name: Deploy ctlog Pod
  ansible.builtin.include_tasks: podman/install_manifest.yml
  vars:
    podman_spec:
      state: started
      systemd_file: ctlog
      network: "{{ tas_single_node_podman_network }}"
      kube_file_content: "{{ lookup('ansible.builtin.template', 'manifests/ctlog/ctlog.j2') | from_yaml }}"
      configmap: "{{ tas_single_node_ctlog_configmap_config }}"
      configmap_changed: "{{ configmap_result.changed }}"
      secret: "{{ tas_single_node_ctlog_secret }}"
      secret_changed: "{{ secret_result.changed }}"
