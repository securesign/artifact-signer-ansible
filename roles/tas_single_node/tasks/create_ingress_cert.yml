---
- name: Set certificate facts for {{ cert_name }}
  ansible.builtin.set_fact:
    remote_key_path: "{{ tas_single_node_certs_dir }}/ingress-{{ cert_name }}.key"
    remote_cert_path: "{{ tas_single_node_certs_dir }}/ingress-{{ cert_name }}.pem"

- name: Fail if only the ingress certificate is provided without a private key
  ansible.builtin.fail:
    msg: "Ingress certificate '{{ cert_name }}' is provided, but the corresponding private key is missing. Please provide both the certificate and private key."
  when: >
    tas_single_node_ingress_certificates[cert_name].certificate | default('') != ''
    and tas_single_node_ingress_certificates[cert_name].private_key | default('') == ''

- name: Load user-provided ingress private key for {{ cert_name }}
  ansible.builtin.copy:
    content: "{{ tas_single_node_ingress_certificates[cert_name].private_key }}"
    dest: "{{ remote_key_path }}"
    mode: '0600'
  when: tas_single_node_ingress_certificates[cert_name].private_key | default('') != ''
  no_log: true

- name: Load user-provided ingress certificate for {{ cert_name }}
  ansible.builtin.copy:
    content: "{{ tas_single_node_ingress_certificates[cert_name].certificate }}"
    dest: "{{ remote_cert_path }}"
    mode: '0600'
  when: >
    tas_single_node_ingress_certificates[cert_name].certificate | default('') != ''
    and tas_single_node_ingress_certificates[cert_name].private_key | default('') != ''

- name: Set tas_single_node_ingress_use_provided_cert_marker_file for {{ cert_name }}
  ansible.builtin.set_fact:
    tas_single_node_ingress_use_provided_cert_marker_file: "{{ tas_single_node_certs_dir }}/_ingress_{{ cert_name }}_use_provided_cert"

- name: Create marker file if key/cert is provided by the user ({{ cert_name }})
  ansible.builtin.file:
    path: "{{ tas_single_node_ingress_use_provided_cert_marker_file }}"
    state: touch
    mode: '0644'
  when: >
    existing_files.files | selectattr('path', 'equalto', tas_single_node_ingress_use_provided_cert_marker_file) | list | length == 0
    and (tas_single_node_ingress_certificates[cert_name].certificate | default('') != ''
      and tas_single_node_ingress_certificates[cert_name].private_key | default('') != '')

- name: Create certificate and private key for {{ cert_name }}
  when: >
    ((existing_files.files | selectattr('path', 'equalto', remote_key_path) | list | length) == 0
    or (existing_files.files | selectattr('path', 'equalto', remote_cert_path) | list | length) == 0)
    and (
      (tas_single_node_ingress_certificates[cert_name].certificate | default('') == ''
       or tas_single_node_ingress_certificates[cert_name].private_key | default('') == ''))
    or (
      (tas_single_node_ingress_certificates[cert_name].certificate | default('') == ''
        or tas_single_node_ingress_certificates[cert_name].private_key | default('') == '')
      and (existing_files.files | selectattr('path', 'equalto', tas_single_node_ingress_use_provided_cert_marker_file) | list | length != 0) )
  #   when: ((existing_files.files | selectattr('path', 'equalto', key_path) | list | length) == 0)
  #         and (existing_files.files | selectattr('path', 'equalto', cert_path) | list | length) == 0))
  block:
    - name: Clean-up existing private key if it exists ({{ cert_name }})
      ansible.builtin.file:
        path: "{{ remote_key_path }}"
        state: absent
      when: >
        tas_single_node_ingress_certificates[cert_name].private_key | default('') == ''
        and (existing_files.files | selectattr('path', 'equalto', tas_single_node_ingress_use_provided_cert_marker_file) | list | length != 0)

    - name: Create private key for {{ cert_name }}
      ansible.builtin.command:
        cmd: "openssl genrsa -out '{{ remote_key_path }}' 4096"
        creates: "{{ remote_key_path }}"
      when: tas_single_node_ingress_certificates[cert_name].private_key | default('') == ''
      no_log: true

    # TODO: Allow more parameters to be provided
    - name: Create certificate signing request (CSR) for certificate for {{ cert_name }}
      ansible.builtin.command:
        cmd: >-
          openssl req -new
          -key '{{ remote_key_path }}'
          -subj '/CN={{ dns_name }}'
          -addext 'subjectAltName = DNS:{{ dns_name }}'
          -addext 'basicConstraints=CA:FALSE'
          -addext 'keyUsage = digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment'
          -addext 'extendedKeyUsage = serverAuth'
      register: csr
      changed_when: false
      when: >
        tas_single_node_ingress_certificates[cert_name].certificate | default('') == ''
        or tas_single_node_ingress_certificates[cert_name].private_key | default('') == ''

    - name: Clean-up existing cert if it exists ({{ cert_name }})
      ansible.builtin.file:
        path: "{{ remote_cert_path }}"
        state: absent
      when: >
        (tas_single_node_ingress_certificates[cert_name].certificate | default('') == ''
        or tas_single_node_ingress_certificates[cert_name].private_key | default('') == '')
        and (existing_files.files | selectattr('path', 'equalto', tas_single_node_ingress_use_provided_cert_marker_file) | list | length != 0)

    - name: Sign certificate with our CA for {{ cert_name }}
      ansible.builtin.shell:
        # valid for two years
        cmd: >-
          set -o pipefail &&
          echo "{{ csr.stdout }}" |
          openssl x509 -req -days 730
          -copy_extensions copyall
          -CA '{{ remote_ca_cert_path }}'
          -CAkey '{{ remote_ca_key_path }}'
          -out '{{ remote_cert_path }}'
        creates: "{{ remote_cert_path }}"
      when: >
        tas_single_node_ingress_certificates[cert_name].certificate | default('') == ''
        or tas_single_node_ingress_certificates[cert_name].private_key | default('') == ''

    - name: Remove marker file if key/cert is not provided by the user ({{ cert_name }})
      ansible.builtin.file:
        path: "{{ tas_single_node_ingress_use_provided_cert_marker_file }}"
        state: absent
      when: existing_files.files | selectattr('path', 'equalto', tas_single_node_ingress_use_provided_cert_marker_file) | list | length != 0
