---
- name: Set Certificate Facts
  ansible.builtin.set_fact:
    remote_key_path: "{{ tas_single_node_certs_dir }}/ingress-{{ cert_name }}.key"
    remote_cert_path: "{{ tas_single_node_certs_dir }}/ingress-{{ cert_name }}.pem"
  delegate_to: localhost

- name: Create certificate and private key
  when: >
    (existing_files.files | selectattr('path', 'equalto', remote_key_path) | list | length) == 0
    or (existing_files.files | selectattr('path', 'equalto', remote_cert_path) | list | length) == 0
  #   when: ((existing_files.files | selectattr('path', 'equalto', key_path) | list | length) == 0)
  #         and (existing_files.files | selectattr('path', 'equalto', cert_path) | list | length) == 0))
  block:
    - name: Create Private Key {{ cert_name }}
      ansible.builtin.command:
        cmd: "openssl genrsa -out '{{ remote_key_path }}' 4096"
        creates: "{{ remote_key_path }}"

    # TODO: Allow more parameters to be provided
    - name: Create certificate signing request (CSR) for new certificate
      ansible.builtin.command:
        cmd: >-
          openssl req -new
          -key '{{ remote_key_path }}'
          -subj '/CN={{ dns_name }}'
          -addext 'subjectAltName = DNS:{{ dns_name }}'
          -addext 'basicConstraints=CA:FALSE'
          -addext 'keyUsage = digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment'
          -addext 'extendedKeyUsage = serverAuth'
      register: csr
      changed_when: false

    - name: Sign certificate with our CA
      ansible.builtin.shell:
        # valid for two years
        cmd: >-
          set -o pipefail &&
          echo "{{ csr.stdout }}" |
          openssl x509 -req -days 730
          -CA '{{ remote_ca_cert_path }}'
          -CAkey '{{ remote_ca_key_path }}'
          -out '{{ remote_cert_path }}'
        creates: "{{ remote_cert_path }}"
